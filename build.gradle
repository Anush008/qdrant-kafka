import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'

    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'io.qdrant'
version = '1.0.0'
description = 'qdrant-kafka'
java.sourceCompatibility = JavaVersion.VERSION_1_8


repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://packages.confluent.io/maven/')
    }
}

dependencies {
    implementation 'org.apache.kafka:connect-api:3.7.0'

    implementation 'io.qdrant:client:1.9.1'
    implementation 'io.grpc:grpc-protobuf:1.64.0'
    implementation 'com.google.guava:guava:33.2.1-jre'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.google.protobuf:protobuf-java-util:3.25.3'
    implementation 'org.slf4j:slf4j-api:2.0.13'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

}


java {
    withSourcesJar()
    withJavadocJar()
}

test {
	useJUnitPlatform()
}

shadowJar {
    minimize()
    archiveClassifier.set('confluent')
}

ext.releaseDate = DateTimeFormatter.ISO_LOCAL_DATE.format(LocalDateTime.now())
def archiveFilename = 'qdrant-kafka'

task prepareConfluentArchive(type: Copy) {
    group = 'Confluent'
    dependsOn 'shadowJar'

    def baseDir = "$archiveFilename-${project.version}"
    from('archive/manifest.json') {
        expand project.properties
        destinationDir = file "$buildDir/confluentArchive/$baseDir"
    }

    from('archive/assets') {
        into 'assets'
    }

    from('archive/etc') {
        include 'qdrant-kafka.properties'
        into 'etc'
    }

    from("$buildDir/libs") {
        include "${project.name}-${project.version}-confluent.jar"
        into 'lib'
    }

    from('.') {
        include 'README.md', 'LICENSE'
        into 'doc'
    }
}

task createConfluentArchive(type: Zip) {
    group = 'Confluent'
    dependsOn prepareConfluentArchive
    from "$buildDir/confluentArchive"
    archiveBaseName.set('')
    archiveAppendix.set(archiveFilename)
    archiveVersion.set(project.version.toString())
    destinationDirectory.set(file("$buildDir/confluent"))
}